import { API_CONFIG, API_ENDPOINTS } from '../config/api.js'
import { getToken } from './tokenStorage.js'

/**
 * Service ƒë·ªÉ x·ª≠ l√Ω API h√≥a ƒë∆°n (thay th·∫ø ƒë∆°n h√†ng)
 */
export class OrderService {
  /**
   * T·∫°o h√≥a ƒë∆°n t·ª´ gi·ªè h√†ng
   * POST /api/hoadon/from-cart
   * @param {Object} orderData - D·ªØ li·ªáu h√≥a ƒë∆°n
   * @param {string} orderData.maKH - M√£ kh√°ch h√†ng
   * @param {string} orderData.maNV - M√£ nh√¢n vi√™n (tu·ª≥ ch·ªçn)
   * @param {string} orderData.diaChiGiaoHang - ƒê·ªãa ch·ªâ giao h√†ng
   * @param {string[]} orderData.selectedCartItemIds - Danh s√°ch ID item trong gi·ªè h√†ng
   * @returns {Promise<Object>} - K·∫øt qu·∫£ t·∫°o h√≥a ƒë∆°n
   */
  static async createOrderFromCart(orderData) {
    try {
      console.log('üöÄ OrderService.createOrderFromCart - Starting invoice creation...')
      console.log('üìã Order data received:', JSON.stringify(orderData, null, 2))
      
      const token = getToken()
      if (!token) {
        throw new Error('Kh√¥ng c√≥ token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.')
      }
      console.log('üîë JWT token found:', token.substring(0, 20) + '...')

      const url = `${API_CONFIG.BASE_URL}${API_ENDPOINTS.HOADON.CREATE_FROM_CART}`
      console.log('üåê Calling API:', url)
             console.log('üì§ Request payload:')
       console.log('   - maKH:', orderData.maKH)
       console.log('   - maNV:', orderData.maNV || 'N/A')
       console.log('   - ghiChu:', orderData.ghiChu || 'N/A')
       console.log('   - selectedCartItemIds:', orderData.selectedCartItemIds)
       console.log('   - trangThai:', orderData.trangThai || 0)
      
                    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
       if (!orderData.selectedCartItemIds || orderData.selectedCartItemIds.length === 0) {
         throw new Error('Ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt item t·ª´ gi·ªè h√†ng ƒë·ªÉ t·∫°o h√≥a ƒë∆°n')
       }
       
       // T·∫°o h√≥a ƒë∆°n v·ªõi selectedCartItemIds (theo flow chu·∫©n)
       console.log('üì§ Creating invoice with selectedCartItemIds:')
       console.log('   - selectedCartItemIds:', orderData.selectedCartItemIds)
       console.log('   - selectedCartItemIds count:', orderData.selectedCartItemIds?.length || 0)
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(orderData)
      })

      console.log('üì° API Response status:', response.status)
      console.log('üì° API Response ok:', response.ok)
      console.log('üì° API Response headers:', Object.fromEntries(response.headers.entries()))

             if (!response.ok) {
         const errorData = await response.json().catch(() => null)
         console.error('‚ùå API Error response:', errorData)
         
         // X·ª≠ l√Ω l·ªói chi ti·∫øt h∆°n
         let errorMessage = 'T·∫°o h√≥a ƒë∆°n th·∫•t b·∫°i'
         if (errorData?.message) {
           errorMessage = errorData.message
         } else if (errorData?.error) {
           errorMessage = errorData.error
         } else if (response.statusText) {
           errorMessage += `: ${response.statusText}`
         }
         
         throw new Error(errorMessage)
       }

             const result = await response.json()
       console.log('‚úÖ Invoice creation successful!')
       console.log('üì¶ Full API Response data:', JSON.stringify(result, null, 2))
       
       // Ki·ªÉm tra response success
       if (!result.success) {
         console.warn('‚ö†Ô∏è Response success = false, but HTTP status is OK')
         console.warn('   - Message:', result.message || 'N/A')
         console.warn('   - Error:', result.error || 'N/A')
       }
      
             // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu tr·∫£ v·ªÅ - H√≥a ƒë∆°n ch√≠nh
       console.log('\nüìã === INVOICE DETAILS (HOADON) ===')
       if (result.result) {
         console.log('‚úÖ Invoice result object found in response')
         console.log(`   - M√£ h√≥a ƒë∆°n: ${result.result.maHD || 'N/A'}`)
         console.log(`   - M√£ kh√°ch h√†ng: ${result.result.maKH || 'N/A'}`)
         console.log(`   - M√£ nh√¢n vi√™n: ${result.result.maNV || 'N/A'}`)
         console.log(`   - M√£ khuy·∫øn m√£i: ${result.result.maKM || 'N/A'}`)
         console.log(`   - Ng√†y l·∫≠p: ${result.result.ngayLap || 'N/A'}`)
         console.log(`   - T·ªïng ti·ªÅn h√†ng: ${result.result.tongTienHang || 'N/A'}`)
         console.log(`   - Ti·ªÅn gi·∫£m gi√°: ${result.result.tienGiamGia || 'N/A'}`)
         console.log(`   - T·ªïng ti·ªÅn: ${result.result.tongTien || 'N/A'}`)
         console.log(`   - Tr·∫°ng th√°i: ${result.result.trangThai || 'N/A'}`)
         console.log(`   - ƒêi·ªÉm t√≠ch l≈©y: ${result.result.diemTichLuy || 'N/A'}`)
         console.log(`   - Ghi ch√∫: ${result.result.ghiChu || 'N/A'}`)
       } else {
         console.log('‚ùå Invoice result object missing from response')
       }
      
             // Ki·ªÉm tra chi ti·∫øt h√≥a ƒë∆°n
       console.log('\nüì¶ === INVOICE ITEMS (CHITIETHOADON) ===')
       if (result.result && result.result.items) {
         console.log(`‚úÖ Chi ti·∫øt h√≥a ƒë∆°n found: ${result.result.items.length} items`)
         
         result.result.items.forEach((item, index) => {
           console.log(`\n   üìã Item ${index + 1}:`)
           console.log(`      - M√£ s·∫£n ph·∫©m: ${item.maSP || 'N/A'}`)
           console.log(`      - T√™n s·∫£n ph·∫©m: ${item.tenSP || 'N/A'}`)
           console.log(`      - S·ªë l∆∞·ª£ng: ${item.soLuong || 'N/A'}`)
           console.log(`      - ƒê∆°n gi√° b√°n: ${item.donGiaBan || item.donGia || 'N/A'}`)
           console.log(`      - Th√†nh ti·ªÅn: ${item.thanhTien || 'N/A'}`)
           console.log(`      - Gi·∫£m gi√°: ${item.giamGia || 'N/A'}`)
           console.log(`      - Th√†nh ti·ªÅn sau gi·∫£m: ${item.thanhTienSauGiam || 'N/A'}`)
         })
         
         // T√≠nh t·ªïng ki·ªÉm tra
         const totalItems = result.result.items.length
         const totalQuantity = result.result.items.reduce((sum, item) => sum + (item.soLuong || 0), 0)
         const totalAmount = result.result.items.reduce((sum, item) => sum + (item.thanhTien || 0), 0)
         
         console.log(`\nüìä === SUMMARY ===`)
         console.log(`   - T·ªïng s·ªë s·∫£n ph·∫©m: ${totalItems}`)
         console.log(`   - T·ªïng s·ªë l∆∞·ª£ng: ${totalQuantity}`)
         console.log(`   - T·ªïng th√†nh ti·ªÅn: ${totalAmount}`)
         console.log(`   - T·ªïng ti·ªÅn h√≥a ƒë∆°n: ${result.result.tongTien || 'N/A'}`)
         
       } else {
         console.log('‚ùå Chi ti·∫øt h√≥a ƒë∆°n missing or empty')
         if (result.result) {
           console.log('   - Invoice result exists but no items')
           console.log('   - Result keys:', Object.keys(result.result))
         }
       }
      
             // Ki·ªÉm tra response structure
       console.log('\nüîç === RESPONSE STRUCTURE ===')
       console.log('   - Response keys:', Object.keys(result))
       console.log('   - success:', result.success)
       console.log('   - message:', result.message || 'N/A')
       console.log('   - error:', result.error || 'N/A')
       console.log('   - result exists:', !!result.result)
       console.log('   - items exists:', !!(result.result && result.result.items))
      
      return result
    } catch (error) {
      console.error('üí• Error creating invoice from cart:', error)
      console.error('   - Error name:', error.name)
      console.error('   - Error message:', error.message)
      console.error('   - Error stack:', error.stack)
      throw error
    }
  }

  /**
   * L·∫•y danh s√°ch h√≥a ƒë∆°n c·ªßa kh√°ch h√†ng
   * GET /api/hoadon/by-khachhang/{maKH}
   * @param {string} maKH - M√£ kh√°ch h√†ng
   * @returns {Promise<Array>} - Danh s√°ch h√≥a ƒë∆°n
   */
  static async getOrdersByCustomer(maKH) {
    try {
      const token = getToken()
      if (!token) {
        throw new Error('Kh√¥ng c√≥ token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.')
      }

      const response = await fetch(`${API_CONFIG.BASE_URL}${API_ENDPOINTS.HOADON.BY_CUSTOMER(maKH)}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (!response.ok) {
        throw new Error(`L·∫•y h√≥a ƒë∆°n th·∫•t b·∫°i: ${response.statusText}`)
      }

      return await response.json()
    } catch (error) {
      console.error(`Error getting invoices for customer ${maKH}:`, error)
      throw error
    }
  }

  /**
   * L·∫•y th√¥ng tin h√≥a ƒë∆°n theo ID
   * GET /api/hoadon/{maHD}
   * @param {string} orderId - ID h√≥a ƒë∆°n
   * @returns {Promise<Object>} - Th√¥ng tin h√≥a ƒë∆°n
   */
  static async getOrderById(orderId) {
    try {
      const token = getToken()
      if (!token) {
        throw new Error('Kh√¥ng c√≥ token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.')
      }

      const response = await fetch(`${API_CONFIG.BASE_URL}${API_ENDPOINTS.HOADON.BY_ID(orderId)}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (!response.ok) {
        throw new Error(`L·∫•y h√≥a ƒë∆°n th·∫•t b·∫°i: ${response.statusText}`)
      }

      return await response.json()
    } catch (error) {
      console.error(`Error getting invoice ${orderId}:`, error)
      throw error
    }
  }

  /**
   * L·∫•y chi ti·∫øt h√≥a ƒë∆°n theo m√£ h√≥a ƒë∆°n
   * GET /api/chitiethoadon/{maHD}
   * @param {string} maHD - M√£ h√≥a ƒë∆°n
   * @returns {Promise<Object>} - Chi ti·∫øt h√≥a ƒë∆°n v·ªõi th√¥ng tin s·∫£n ph·∫©m
   */
  static async getOrderDetails(maHD) {
    try {
      console.log('üîç Getting order details for maHD:', maHD)
      
      const token = getToken()
      if (!token) {
        throw new Error('Kh√¥ng c√≥ token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.')
      }

      const response = await fetch(`${API_CONFIG.BASE_URL}/api/chitiethoadon/${maHD}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })

      console.log('üì° Order details API response status:', response.status)

      if (!response.ok) {
        throw new Error(`L·∫•y chi ti·∫øt h√≥a ƒë∆°n th·∫•t b·∫°i: ${response.statusText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Order details received:', result)
      
      return result
    } catch (error) {
      console.error(`Error getting order details for ${maHD}:`, error)
      throw error
    }
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i h√≥a ƒë∆°n
   * PATCH /api/hoadon/{maHD}/trangthai
   * @param {string} orderId - ID h√≥a ƒë∆°n
   * @param {string} newStatus - Tr·∫°ng th√°i m·ªõi
   * @returns {Promise<Object>} - K·∫øt qu·∫£ c·∫≠p nh·∫≠t
   */
  static async updateOrderStatus(orderId, newStatus) {
    try {
      const token = getToken()
      if (!token) {
        throw new Error('Kh√¥ng c√≥ token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.')
      }

      const response = await fetch(`${API_CONFIG.BASE_URL}${API_ENDPOINTS.HOADON.UPDATE_STATUS(orderId)}?trangThaiMoi=${encodeURIComponent(newStatus)}`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (!response.ok) {
        throw new Error(`C·∫≠p nh·∫≠t tr·∫°ng th√°i h√≥a ƒë∆°n th·∫•t b·∫°i: ${response.statusText}`)
      }

      return await response.json()
    } catch (error) {
      console.error(`Error updating invoice ${orderId} status:`, error)
      throw error
    }
  }
}

export default OrderService
