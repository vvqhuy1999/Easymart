// API Configuration - Updated v√† cleaned up theo backend m·ªõi
export const API_CONFIG = {
  // Base URL - adjust this to match your backend
  BASE_URL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8080',
  
  // üîê AUTHENTICATION APIs (AuthenticationController)
  AUTH: {
    // Login/Logout ch√≠nh
    LOGIN: '/api/auth/log-in',                    // POST - ƒêƒÉng nh·∫≠p th∆∞·ªùng (email/password)
    LOGOUT: '/api/auth/log-out',                  // POST - ƒêƒÉng xu·∫•t (h·ªó tr·ª£ t·∫•t c·∫£ lo·∫°i t√†i kho·∫£n)
    
    // Token Management
    STATUS: '/api/auth/status',                   // GET - Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
    VALIDATE_TOKEN: '/api/auth/validate-token',   // POST - Validate JWT token
    
    // Admin APIs (optional)
    BLACKLIST_INFO: '/api/auth/blacklist-info',   // GET - L·∫•y th√¥ng tin blacklist
    CHECK_BLACKLIST: '/api/auth/check-blacklist'  // POST - Ki·ªÉm tra token trong blacklist
  },
  
  // üë§ USER MANAGEMENT APIs (NguoiDungRestController) - ‚≠ê M·ªöI
  USER: {
    // Registration & User Management
    REGISTER: '/api/nguoidung/register',          // POST - üéØ ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
    GET_ALL: '/api/nguoidung',                    // GET - L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng
    GET_BY_ID: '/api/nguoidung/{maNguoiDung}',    // GET - L·∫•y ng∆∞·ªùi d√πng theo ID
    GET_BY_EMAIL: '/api/nguoidung/email/{email}', // GET - L·∫•y ng∆∞·ªùi d√πng theo email
    UPDATE: '/api/nguoidung/{maNguoiDung}',       // PUT - C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
    DELETE: '/api/nguoidung/{maNguoiDung}',       // DELETE - X√≥a ng∆∞·ªùi d√πng (soft delete)
    
    // Validation APIs
    CHECK_EMAIL: '/api/nguoidung/check-email/{email}',     // GET - Ki·ªÉm tra email t·ªìn t·∫°i
    CHECK_ID: '/api/nguoidung/check-id/{maNguoiDung}'      // GET - Ki·ªÉm tra m√£ ng∆∞·ªùi d√πng t·ªìn t·∫°i
  },
  
  // üåê OAUTH2 APIs (OAuth2Controller) - Updated
  OAUTH2: {
    // JWT Token Management  
    GET_JWT_TOKEN: '/api/oauth2/get-jwt-token',   // GET - ‚≠ê L·∫•y JWT token t·ª´ Google OAuth2
    
    // User Information
    USER_INFO: '/api/oauth2/user-info',           // GET - L·∫•y th√¥ng tin OAuth2 user
    SUCCESS: '/api/oauth2/success',               // GET - OAuth2 success handler
    FAILURE: '/api/oauth2/failure',               // GET - OAuth2 failure handler
    
    // Validation & Checking (OAuth2)
    CHECK_EMAIL: '/api/oauth2/check-email',       // GET - Ki·ªÉm tra email tr√πng l·∫∑p (OAuth2)
    CHECK_SUB: '/api/oauth2/check-sub',           // GET - Ki·ªÉm tra OAuth2 ID
    
    // Configuration & Testing
    TEST_CONFIG: '/api/oauth2/test-config',       // GET - Ki·ªÉm tra c·∫•u h√¨nh OAuth2
    
    // Deprecated (s·∫Ω chuy·ªÉn h∆∞·ªõng)
    LOGOUT_DEPRECATED: '/api/oauth2/logout'       // POST - ‚ö†Ô∏è DEPRECATED, d√πng AUTH.LOGOUT
  },
  
  // üöÄ OAuth2 Authorization URLs (Spring Security endpoints)
  AUTHORIZATION: {
    GOOGLE: '/oauth2/authorization/google',       // ƒêƒÉng nh·∫≠p Google
    FACEBOOK: '/oauth2/authorization/facebook'    // ƒêƒÉng nh·∫≠p Facebook
  }
}

// Helper function to get full API URL
export const getApiUrl = (endpoint) => {
  return `${API_CONFIG.BASE_URL}${endpoint}`
}

// Helper function for OAuth2 authorization URLs
export const getAuthUrl = (provider) => {
  return `${API_CONFIG.BASE_URL}${API_CONFIG.AUTHORIZATION[provider.toUpperCase()]}`
}

// Helper function for parameterized URLs
export const getApiUrlWithParams = (endpoint, params) => {
  let url = endpoint
  for (const [key, value] of Object.entries(params)) {
    url = url.replace(`{${key}}`, encodeURIComponent(value))
  }
  return `${API_CONFIG.BASE_URL}${url}`
}

// User roles constants
export const USER_ROLES = {
  ADMIN: 0,           // Qu·∫£n tr·ªã
  MANAGER: 1,         // Qu·∫£n l√Ω  
  STAFF: 2,           // Nh√¢n vi√™n
  CUSTOMER: 3         // Kh√°ch h√†ng (default)
}
